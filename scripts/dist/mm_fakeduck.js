/*
Github: https://github.com/le0developer/onetap/blob/master/scripts/mm_fakeduck.coffee
Automatically generated and compiled on Mon Sep 21 2020 19:42:25 GMT+0200 (Central European Summer Time)

MIT License

Copyright (c) 2020 LeoDeveloper

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
// Generated by CoffeeScript 2.5.1
// Matchmaking "fake"duck, basically full ducks and unducks for a few ticks with fakelag
// Makes it impossible to hit you while unducking, EXCEPT onshot
var fakelag_original, fakelag_override, fakelag_overrides, fakelag_recover, isDebug, isPressed, onCreateMove, onUnload;

UI.AddHotkey("MM Fakeduck");

isPressed = function() {
  return UI.IsHotkeyActive("Script Items", "MM Fakeduck");
};

isDebug = function() {
  return false;
};

fakelag_original = null; // store original values here

fakelag_overrides = {
  Enabled: false,
  Limit: 6,
  Jitter: 0,
  "Trigger limit": 0
};

fakelag_override = function() {
  var name, value;
  fakelag_original = {};
  for (name in fakelag_overrides) {
    value = fakelag_overrides[name];
    fakelag_original[name] = UI.GetValue("Anti-Aim", "Fake-Lag", name);
    UI.SetValue("Anti-Aim", "Fake-Lag", name, value);
  }
  return void 0;
};

fakelag_recover = function() {
  var name, value;
  for (name in fakelag_original) {
    value = fakelag_original[name];
    UI.SetValue("Anti-Aim", "Fake-Lag", name, value);
  }
  return fakelag_original = null;
};

onCreateMove = function() {
  var duck, should_choke, should_duck, tc;
  if (!isPressed()) {
    if (fakelag_original != null) {
      fakelag_recover();
    }
    return;
  }
  duck = Entity.GetProp(Entity.GetLocalPlayer(), "CCSPlayer", "m_flDuckAmount");
  if ((fakelag_original == null) && duck !== 0.875) { // enabled fd but isnt fully ducked
    UserCMD.ForceCrouch();
    return;
  }
  if (fakelag_original == null) {
    fakelag_override();
  }
  tc = Globals.Tickcount() % (Globals.Tickrate() / 2);
  should_choke = tc <= 7;
  should_duck = !((4 >= tc && tc >= 1));
  if (isDebug()) {
    Cheat.Print("[OT-FD] tick: " + tc + " choking: " + should_choke + " ducking: " + should_duck + " duck: " + duck + "\n");
  }
  UI.SetValue("Anti-Aim", "Fake-Lag", "Enabled", should_choke);
  if (should_duck) {
    return UserCMD.ForceCrouch();
  }
};

onUnload = function() {
  if (fakelag_original != null) {
    return fakelag_recover(); // recover fakelag when disabling while fakeducking
  }
};

Cheat.RegisterCallback("CreateMove", "onCreateMove");

Cheat.RegisterCallback("Unload", "onUnload");
